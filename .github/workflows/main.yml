name: Code Scanning

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  GITHUB_TOKEN : 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
  SONAR_TOKEN : 1affd398034bd9c7d0049bcdef6fbdc624b51344
  SONAR_SERVER : http://ec2-18-116-29-192.us-east-2.compute.amazonaws.com:9000
  DEFECTDOJO_SERVER: http://ec2-18-223-247-63.us-east-2.compute.amazonaws.com:8080
jobs:
  SonarScanner:
    runs-on: ubuntu-latest
    name: Sonar Scanner
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install dependencies
        run: yarn install --production=false
      - name: Scan code
        uses: vtex/action-sonarqube@main
        with:
          githubToken: ${{ env.GITHUB_TOKEN }}
          host: ${{ env.SONAR_SERVER }} 
          token: ${{ env.SONAR_TOKEN }} 

      
  EngagementSonarqube:
          name: Create engagement Sonarqube
          runs-on: ubuntu-latest
          needs: SonarScanner
          steps:
            - name: Run the build process with Docker
              uses: addnab/docker-run-action@v3
              with:
                  image: curlimages/curl
                  run: | 
                        curl -X 'POST' \
                        '${{ env.DEFECTDOJO_SERVER }}/api/v2/engagements/' \
                        -H 'accept: application/json' \
                        -H 'Content-Type: application/json' \
                        -H 'X-CSRFTOKEN: tJY9NWtnlqurzkvzn9R4y0uK6TOV5W2gHEU2qllNpdsaQEsd3vC9zrOtpbabmHTZ' \
                        -H "Authorization: Token 0dfc2ae06f011369f4eefbcf3e067efb9627ce09" \
                        -d '{
                        "name":"SonarqubeGithub",
                        "engagement_type": "CI/CD",
                        "target_start": "2022-06-02",
                        "target_end": "2022-06-02",
                        "product": 3
                        }'

  PublishFindingsSonar:
          name: Publish findings Sonarqube
          runs-on: ubuntu-latest
          needs: EngagementSonarqube
          steps:
            - name: Run the build process with Docker
              uses: addnab/docker-run-action@v3
              with:
                  image: curlimages/curl
                  run: |
                        curl --request POST "${{ env.DEFECTDOJO_SERVER }}/api/v2/import-scan/" \
                              --header "Authorization: Token 0dfc2ae06f011369f4eefbcf3e067efb9627ce09" \
                              --form "scan_date=\"2022-06-02\"" \
                              --form "minimum_severity=\"Info\"" \
                              --form "active=\"true\"" \
                              --form "verified=\"false\"" \
                              --form "scan_type=\"SonarQube API Import\"" \
                              --form "engagement_name=\"SonarqubeGithub\"" \
                              --form "close_old_findings=\"true\"" \
                              --form "product_name=\"gastonbarbaccia-test\"" \
                              --form "scan_type=\"SonarQube API Import\"" \
                              --form "environment=\"Default\""
                    

  dependency_check:
    runs-on: ubuntu-latest
    name: Dependency check Scan
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Depcheck
        uses: dependency-check/Dependency-Check_Action@main
        id: Depcheck
        with:
          project: 'test'
          path: '.'
          format: 'XML'    
          args: >
            --failOnCVSS 7
            --enableRetired
      - name: Upload Test results
        uses: actions/upload-artifact@master
        with:
           name: Depcheck report
           path: ${{github.workspace}}/reports

  

  EngagementDependencyCheck:
          name: Create engagement Dependency Check
          runs-on: ubuntu-latest
          needs: dependency_check
          steps:
            - name: Run the build process with Docker
              uses: addnab/docker-run-action@v3
              with:
                  image: curlimages/curl
                  run: | 
                        curl -X 'POST' \
                        '${{ env.DEFECTDOJO_SERVER }}/api/v2/engagements/' \
                        -H 'accept: application/json' \
                        -H 'Content-Type: application/json' \
                        -H 'X-CSRFTOKEN: tJY9NWtnlqurzkvzn9R4y0uK6TOV5W2gHEU2qllNpdsaQEsd3vC9zrOtpbabmHTZ' \
                        -H "Authorization: Token 0dfc2ae06f011369f4eefbcf3e067efb9627ce09" \
                        -d '{
                        "name":"DependencyCheckGithub",
                        "engagement_type": "CI/CD",
                        "target_start": "2022-06-02",
                        "target_end": "2022-06-02",
                        "product": 3
                        }'

  PublishFindingsDependencyCheck:
          name: Publish findings Dependency Check
          runs-on: ubuntu-latest
          needs: EngagementDependencyCheck
          steps:
            - uses: actions/download-artifact@v2
              with:
                name: Depcheck report
            - name: Upload report
              run: |
                    curl -X POST '${{ env.DEFECTDOJO_SERVER }}/api/v2/import-scan/' \
                    -H  "accept: application/json" \
                    -H  "Content-Type: multipart/form-data" \
                    -H  "X-CSRFToken: ujMSwx6OazuMFYFeovC7SFWNZ4MeCRS7dqRYTlAHYXBDCGvw5aoC2iWR9m5UCwts" \
                    -H "Authorization: Token 0dfc2ae06f011369f4eefbcf3e067efb9627ce09" \
                    -F "scan_date=2022-06-02" \
                    -F "minimum_severity=Info" \
                    -F "active=true" \
                    -F "verified=false" \
                    -F "scan_type=Dependency Check Scan" \
                    -F "product_name=gastonbarbaccia-test" \
                    -F "file=@dependency-check-report.xml;type=text/xml" \
                    -F "engagement_name=DependencyCheckGithub" \
                    -F "close_old_findings=true" \
                    -F "push_to_jira=false"
                    
  trivy:
    name: Scan trivy
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Build an image from Dockerfile
        run: |
          docker build -t gastonbarbaccia/test_v1 .
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'gastonbarbaccia/test_v1'
          format: 'json'
          output: 'trivy-results.json'
      
      - name: Upload Test results
        uses: actions/upload-artifact@master
        with:
           name: Container report
           path: trivy-results.json

  EngagementTrivy:
          name: Create engagement Trivy
          runs-on: ubuntu-latest
          needs: trivy
          steps:
                - name: Run the build process with Docker
                  uses: addnab/docker-run-action@v3
                  with:
                      image: curlimages/curl
                      run: | 
                            curl -X 'POST' \
                            '${{ env.DEFECTDOJO_SERVER }}/api/v2/engagements/' \
                            -H 'accept: application/json' \
                            -H 'Content-Type: application/json' \
                            -H 'X-CSRFTOKEN: tJY9NWtnlqurzkvzn9R4y0uK6TOV5W2gHEU2qllNpdsaQEsd3vC9zrOtpbabmHTZ' \
                            -H "Authorization: Token 0dfc2ae06f011369f4eefbcf3e067efb9627ce09" \
                            -d '{
                            "name":"TrivyGithub",
                            "engagement_type": "CI/CD",
                            "target_start": "2022-06-02",
                            "target_end": "2022-06-02",
                            "product": 3
                            }'

  PublishFindingsTrivy:
          name: Publish findings Trivy
          runs-on: ubuntu-latest
          needs: EngagementTrivy
          steps:
            - uses: actions/download-artifact@v2
              with:
                name: Container report
            - name: Upload report
              run: |
                    curl -X POST '${{ env.DEFECTDOJO_SERVER }}/api/v2/import-scan/' \
                    -H  "accept: application/json" \
                    -H  "Content-Type: multipart/form-data" \
                    -H  "X-CSRFToken: ujMSwx6OazuMFYFeovC7SFWNZ4MeCRS7dqRYTlAHYXBDCGvw5aoC2iWR9m5UCwts" \
                    -H "Authorization: Token 0dfc2ae06f011369f4eefbcf3e067efb9627ce09" \
                    -F "scan_date=2022-06-02" \
                    -F "minimum_severity=Info" \
                    -F "active=true" \
                    -F "verified=false" \
                    -F "scan_type=Trivy Scan" \
                    -F "product_name=gastonbarbaccia-test" \
                    -F "file=@trivy-results.json;type=text/json" \
                    -F "engagement_name=TrivyGithub" \
                    -F "close_old_findings=true" \
                    -F "push_to_jira=false"

  Staging:
    name: Staging
    runs-on: ubuntu-latest
    needs: [PublishFindingsSonar, PublishFindingsDependencyCheck,PublishFindingsTrivy]
    steps:
      - uses: actions/checkout@v2
      - uses: akhileshns/heroku-deploy@v3.12.12 
        with:
          heroku_api_key: "65817ae2-fa72-49ce-8baf-476e80324340"
          heroku_app_name: "devsecops-test"
          heroku_email: "gastonbarbaccia@hotmail.com"

#  DAST:
#    name: Acunetix Scan DAST
#    runs-on: ubuntu-latest
#    needs: Staging
#    steps:
#      - name: Trigger Acunetix Scan
#        run: |
#              curl -k -i --request POST --url "https://3.134.174.38:3443/api/v1/scans" \
#              --header "X-Auth: 1986ad8c0a5b3df4d7028d5f3c06e936c6ee269ab7bdc496db893bb19e349b85b" --header "content-type: application/json" \
#              --data '{
#                "profile_id":"11111111-1111-1111-1111-111111111111", 
#                "schedule":{"disable":false,"start_date":null,"time_sensitive":false}, 
#                "user_authorized_to_scan":"yes", "target_id":"2dd62018-1b5f-445c-882a-28a4da07e76e"
#                }'

  DAST:
    name: Zap Proxy
    runs-on: ubuntu-latest
    needs: Staging
    steps:
    - name: ZAP Scan
      uses: zaproxy/action-full-scan@v0.4.0
      with:
        target: 'https://devsecops-test.herokuapp.com'


  EngagementZapProxy:
          name: Create engagement Zap Proxy
          runs-on: ubuntu-latest
          needs: DAST
          steps:
                - name: Run the build process with Docker
                  uses: addnab/docker-run-action@v3
                  with:
                      image: curlimages/curl
                      run: | 
                            curl -X 'POST' \
                            '${{ env.DEFECTDOJO_SERVER }}/api/v2/engagements/' \
                            -H 'accept: application/json' \
                            -H 'Content-Type: application/json' \
                            -H 'X-CSRFTOKEN: tJY9NWtnlqurzkvzn9R4y0uK6TOV5W2gHEU2qllNpdsaQEsd3vC9zrOtpbabmHTZ' \
                            -H "Authorization: Token 0dfc2ae06f011369f4eefbcf3e067efb9627ce09" \
                            -d '{
                            "name":"ZapProxyGithub",
                            "engagement_type": "CI/CD",
                            "target_start": "2022-06-02",
                            "target_end": "2022-06-02",
                            "product": 3
                            }'

  PublishFindingsZAPProxy:
          name: Publish findings ZAP Proxy
          runs-on: ubuntu-latest
          needs: EngagementZapProxy
          steps:
            - uses: actions/download-artifact@v2
              with:
                name: ZAP Scan
            - name: Upload report
              run: |
                    curl -X POST '${{ env.DEFECTDOJO_SERVER }}/api/v2/import-scan/' \
                    -H  "accept: application/json" \
                    -H  "Content-Type: multipart/form-data" \
                    -H  "X-CSRFToken: ujMSwx6OazuMFYFeovC7SFWNZ4MeCRS7dqRYTlAHYXBDCGvw5aoC2iWR9m5UCwts" \
                    -H "Authorization: Token 0dfc2ae06f011369f4eefbcf3e067efb9627ce09" \
                    -F "scan_date=2022-06-02" \
                    -F "minimum_severity=Info" \
                    -F "active=true" \
                    -F "verified=false" \
                    -F "scan_type=Trivy Scan" \
                    -F "product_name=gastonbarbaccia-test" \
                    -F "file=@zap_scan/report_zap.html;type=text/html" \
                    -F "engagement_name=ZapProxyGithub" \
                    -F "close_old_findings=true" \
                    -F "push_to_jira=false"