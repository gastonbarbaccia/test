name: Code Scanning

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main, develop

env:
  GITHUB_TOKEN : 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
  SONAR_TOKEN : 1affd398034bd9c7d0049bcdef6fbdc624b51344
  SONAR_SERVER : http://ec2-3-135-236-218.us-east-2.compute.amazonaws.com:9000
      
jobs:
  SonarScanner:
    runs-on: ubuntu-latest
    name: Sonar Scanner
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install dependencies
        run: yarn install --production=false
      - name: Scan code
        uses: vtex/action-sonarqube@main
        with:
          githubToken: ${{ env.GITHUB_TOKEN }}
          host: ${{ env.SONAR_SERVER }} 
          token: ${{ env.SONAR_TOKEN }} 
      - name: 'DefectDojo engagements Sonarqube'
        description: >
            Manage Defectdojo engagements ( Create only )
        tags: >
            description: > 
                (string) Engagement tags
        inputs: 
          token: 1affd398034bd9c7d0049bcdef6fbdc624b51344
          defectdojo_url: http://ec2-3-135-244-217.us-east-2.compute.amazonaws.com:8080/
          defectdojo_endpoint: http://ec2-3-135-244-217.us-east-2.compute.amazonaws.com:8080/api/v2/engagements/
          tags: ''
          name: gastonbarbaccia-test
          description: Proyecto demo de github
          version: ''
          first_contacted: ''
          target_start: ''
          target_end: ''
          reason: ''
          tracker:
          test_strategy: ''
          threat_model: false
          api_test: false
          pen_test: false
          check_list: false
          status: ''
          engagement_type: CI/CD
          build_id: ''
          commit_hash: ''
          branch_tag: ''
          source_code_management_uri: ''
          deduplication_on_engagement: false
          lead: ''
          requester: ''
          preset: ''
          report_type: ''
          product: 3
          build_server: ''
          source_code_management_server: ''
          orchestration_engine: ''
          outputs:
            response:
              description: 'DefectDojo manage engagement result'
              value: ${{ steps.engagements.outputs.response }}
          runs:
            using: 'composite'
            steps:
              - id: engagements
                run: |
                  ${{ github.action_path }}/entrypoint.sh
                shell: bash
                env:
                  INPUT_TOKEN: ${{ inputs.token }}
                  INPUT_DEFECTDOJO_URL: ${{ inputs.defectdojo_url }}
                  INPUT_DEFECTDOJO_ENDPOINT: ${{ inputs.defectdojo_endpoint }}
                  INPUT_TAGS: ${{ inputs.tags }}
                  INPUT_NAME: ${{ inputs.name }}
                  INPUT_DESCRIPTION: ${{ inputs.description }}
                  INPUT_VERSION: ${{ inputs.version }}
                  INPUT_FIRST_CONTACTED: ${{ inputs.first_contacted }}
                  INPUT_TARGET_START: ${{ inputs.target_start }}
                  INPUT_TARGET_END: ${{ inputs.target_end }}
                  INPUT_REASON: ${{ inputs.reason }}
                  INPUT_TRACKER: ${{ inputs.tracker }}
                  INPUT_TEST_STRATEGY: ${{ inputs.test_strategy }}
                  INPUT_THREAT_MODEL: ${{ inputs.threat_model }}
                  INPUT_API_TEST: ${{ inputs.api_test }}
                  INPUT_PEN_TEST: ${{ inputs.pen_test }}
                  INPUT_CHECK_LIST: ${{ inputs.check_list }}
                  INPUT_STATUS: ${{ inputs.status }}
                  INPUT_ENGAGEMENT_ID: ${{ inputs.engagement_type }}
                  INPUT_BUILD_ID: ${{ inputs.build_id }}
                  INPUT_COMMIT_HASH: ${{ inputs.commit_hash }}
                  INPUT_BRANCH_TAG: ${{ inputs.branch_tag }}
                  INPUT_SOURCE_CODE_MANAEMENT_URI: ${{ inputs.source_code_management_uri }}
                  INPUT_DEDUPLICATION_ON_ENGAGEMENT: ${{ inputs.deduplication_on_engagement }}
                  INPUT_LEAD: ${{ inputs.lead }}
                  INPUT_REQUESTER: ${{ inputs.requester }}
                  INPUT_PRESET: ${{ inputs.preset }}
                  INPUT_REPORT_TYPE: ${{ inputs.report_type }}
                  INPUT_PRODUCT: ${{ inputs.product }}
                  INPUT_BUILD_SERVER: ${{ inputs.build_server }}
                  INPUT_SOURCE_CODE_MANAEMENT_SERVER: ${{ inputs.source_code_management_server }}
                  INPUT_ORCHESTRATION_ENGINE: ${{ inputs.orchestration_engine }}
          branding:
            icon: 'target'
            color: 'gray-dark'

